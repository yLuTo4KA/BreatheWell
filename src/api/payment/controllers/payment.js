const bot = require('../../../../config/tg-bot');
const YooKassa = require('yookassa');
const yooKassa = new YooKassa({
    shopId: process.env.SHOP_ID,
    secretKey: process.env.SECRET_SHOP,
});





module.exports = {
    async telegraf(ctx) {
        const { secret } = ctx.params;

        if (secret !== process.env.WEBHOOK_SECRET) {
            return ctx.send('Forbidden', 403);
        }

        try {
            const update = ctx.request.body;
            if (update.message && update.message.text === '/start') {
                const userId = update.message.from.id;
                const imageUrl = 'https://breathwell.space/uploads/welcome_b444b0c832.jpg';

                await bot.telegram.sendPhoto(userId, imageUrl, {
                    caption: `*–î–∞–≤–∞–π –¥—ã—à–∞—Ç—å –≤–º–µ—Å—Ç–µ! üå¨Ô∏è*\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è üëã –¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤ —Å–µ–±–µ –Ω–æ–≤—É—é —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ‚Äî —Ç–≤–æ—ë –¥—ã—Ö–∞–Ω–∏–µ.\n\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ—Ç–∏–≤ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏. –î–∞-–¥–∞, —ç—Ç–æ —Ç–≤–æ–µ –¥—ã—Ö–∞–Ω–∏–µ! –ò —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –¥–∞–∂–µ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ –º–æ—â–Ω–æ–µ. –í–º–µ—Å—Ç–µ –º—ã –±—É–¥–µ–º —É—á–∏—Ç—å—Å—è –ø—Ä–æ—Å—Ç—ã–º, –Ω–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º —Ç–µ—Ö–Ω–∏–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å–ø–æ–∫–æ–π–Ω–µ–µ, —Å–æ–±—Ä–∞–Ω–Ω–µ–µ –∏ –∑–∞—Ä—è–∂–∞—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –±—É–∫–≤–∞–ª—å–Ω–æ –Ω–∞ —Ö–æ–¥—É.\n\n–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Ç–≤–æ–π –Ω–æ–≤—ã–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –≥–¥–µ –±—ã —Ç—ã –Ω–∏ –±—ã–ª. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º, —è —Ç–µ–±–µ –≤—Å—ë –ø–æ–∫–∞–∂—É!`,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '–ù–∞—á–∞—Ç—å', url: `https://t.me/${process.env.BOT_NAME}/${process.env.BOT_START}` }
                            ]
                        ]
                    }
                });
            }
            if (update.pre_checkout_query) {
                const { id, from, invoice_payload, shipping_option_id, order_info } = update.pre_checkout_query;
                const allGoodsAvailable = true;

                if (allGoodsAvailable) {
                    await bot.telegram.answerPreCheckoutQuery(id, true);
                } else {
                    await bot.telegram.answerPreCheckoutQuery(id, false, "Sorry, the item you wanted is no longer available. Please choose another item.");
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            else if (update.message && update.message.successful_payment) {
                const { invoice_payload, total_amount, currency, date } = update.message.successful_payment;
                const paymentStatus = "Paid";
                const userId = update.message.from.id;
                const user = await strapi.query('plugin::users-permissions.user').findOne({
                    where: { tg_id: userId },
                });

                const existingPayment = await strapi.query('api::payment.payment').findOne({
                    where: { user: user.id, status: paymentStatus },
                });
                if (existingPayment) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    await strapi.query('api::payment.payment').update({
                        where: { id: existingPayment.id },
                        data: {
                            total_amount,
                            currency,
                            status: paymentStatus,
                            payment_date: date,
                        }
                    });
                } else {
                    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    await strapi.query('api::payment.payment').create({
                        data: {
                            total_amount,
                            currency,
                            status: paymentStatus,
                            payment_date: date,
                            user: user.id,
                        }
                    });
                }
                const imageUrl = 'https://breathwell.space/uploads/premium_buy_256b9236be.jpg';
                await bot.telegram.sendPhoto(user.tg_id, imageUrl, {
                    caption: `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É! \n\n–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —É—Ä–æ–∫–∏, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∞—É–¥–∏–æ –ø—Ä–∞–∫—Ç–∏–∫–∏.`,
                    parse_mode: 'Markdown'
                });
                await strapi.query('plugin::users-permissions.user').update({
                    where: { tg_id: userId },
                    data: { premium: true }
                });

            }else if(update.type == 'notification' && update.object.id && update.object.paid) {
                if(update.object.status == 'waiting_for_capture') {
                    const capture = await yooKassa.capturePayment(update.object.id, {
                        amount: {
                            value: +update.object.amount.value,
                            currency: 'RUB',
                        }
                    });
                    console.log(capture);
                }
            }
             else {
                console.error('Invalid update data:', update);
            }

            ctx.send('123');
        } catch (e) {
            console.error('Error handling payment or pre-checkout query:', e.message);
            ctx.send('Internal error', 500);
        }
    },
    async getInvoice(ctx, next) {
        const user = ctx.state.user;
        const body = ctx.request.body;
        const date = new Date();
        if (!user) {
            return ctx.unauthorized('You must be logged in to perform this action');
        }

        const payment = await strapi.query('api::payment.payment').create({
            data: {
                total_amount: body.amount ? body.amount : 1900,
                currency: body.currency ? body.currency : 'XTR',
                status: 'Pending',
                payment_date: date,
                email: user.email,
                user: user.id
            }
        });

        const invoice = {
            title: `BreathWell Premium`,
            description: 'Breath well course is good!',
            payload: payment.id.toString(),
            provider_token: '',
            currency: body.currency ? body.currency : 'XTR',
            prices: [{ label: `Premium`, amount: body.amount ? body.amount : 1900 }],
            need_email: true,
            send_email_to_provider: true
        }

        const invoiceLink = await bot.telegram.createInvoiceLink(invoice);

        ctx.send({ url: invoiceLink });
    },

    async getYoInvoice(ctx, next) {
        try {
            const user = ctx.state.user;
            const body = ctx.request.body;
            if (!user) {
                return ctx.unauthorized('You must be logged in to perform this action');
            }
           
            async function createPayment() {
                const yoPay = await yooKassa.createPayment({
                    amount: {
                        value: body.amount,
                        currency: 'RUB',
                    },
                    confirmation: {
                        type: 'redirect',
                        return_url: `https://t.me/breathwellbot/BreathWell`,
                    },
                    receipt: {
                        customer: {
                            email: body.email, // email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                        },
                        items: [
                            {
                                description: 'Premium status BreatheWell',
                                quantity: '1.00',
                                amount: {
                                    value: '100.00',
                                    currency: 'RUB',
                                },
                                vat_code: 1, // –°—Ç–∞–≤–∫–∞ –ù–î–° 20%
                                payment_subject: 'commodity', // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ–≤–∞—Ä
                                payment_mode: 'full_payment', // –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                            },
                        ],

                    },
                    description: 'Premium status BreatheWell',
                    metadata: {
                        userId: user.tg_id,
                    },
                    test: true
                });

                return yoPay;
            }
            const paymentData = await createPayment();

            const payment = await strapi.query('api::payment.payment').create({
                data: {
                    total_amount: +paymentData.amount.value,
                    currency: +paymentData.amount.currency,
                    status: paymentData.status,
                    payment_date: paymentData.created_at,
                    email: body.email,
                    payment_id: paymentData.id,
                    user: user.id
                }
            });

            ctx.send({ url: paymentData.confirmation.confirmation_url });
        } catch (e) {
            ctx.send('error', 404)
        }

    }


};
