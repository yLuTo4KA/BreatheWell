{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.baseUrl;\n  }\n  get(path) {\n    const headers = this.getHeaders();\n    const url = `${this.apiUrl}/${path}`;\n    return this.http.get(url, headers);\n  }\n  post(path, body) {\n    const headers = this.getHeaders();\n    const completeUrl = `${this.apiUrl}/${path}`;\n    return this.http.post(completeUrl, body, headers);\n  }\n  put(path, body) {\n    const headers = {};\n    const completeUrl = `${this.apiUrl}/${path}`;\n    return this.http.put(completeUrl, body, headers);\n  }\n  delete(path) {\n    const headers = this.getHeaders();\n    const completeUrl = `${this.apiUrl}/${path}`;\n    return this.http.delete(completeUrl, headers);\n  }\n  download(path) {\n    const completeUrl = `${this.apiUrl}/${path}`;\n    return this.http.get(completeUrl, {\n      responseType: 'blob'\n    });\n  }\n  uploadDownload(path, body) {\n    const completeUrl = `${this.apiUrl}/${path}`;\n    return this.http.post(completeUrl, body, {\n      responseType: 'blob'\n    });\n  }\n  generateQueryParams(paramsObj) {\n    let params = new HttpParams();\n    Object.entries(paramsObj).filter(([_, value]) => typeof value !== 'undefined' && value !== null).map(([key, value]) => params = params.set(key, value));\n    return params.toString();\n  }\n  getHeaders() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","environment","ApiService","constructor","http","apiUrl","baseUrl","get","path","headers","getHeaders","url","post","body","completeUrl","put","delete","download","responseType","uploadDownload","generateQueryParams","paramsObj","params","Object","entries","filter","_","value","map","key","set","toString","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/yluto4ka/Documents/AngularProjects/Frelance/front/src/app/core/services/api.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QueryParamsModel } from '../models/query-params-model';\nimport { environment } from 'src/environments/environments';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private apiUrl = environment.baseUrl;\n\n  constructor(private http: HttpClient) { }\n\n  get<R>(path: string): Observable<R> {\n    const headers = this.getHeaders();\n    const url = `${this.apiUrl}/${path}`;\n\n    return this.http.get<R>(url, headers);\n  }\n\n\n  post<R, B>(path: string, body: B): Observable<R> {\n    const headers = this.getHeaders();\n    const completeUrl = `${this.apiUrl}/${path}`;\n\n    return this.http.post<R>(completeUrl, body, headers);\n  }\n\n  put<R, B>(path: string, body: B): Observable<R> {\n    const headers = {}\n    const completeUrl = `${this.apiUrl}/${path}`;\n\n    return this.http.put<R>(completeUrl, body, headers);\n  }\n\n  delete<R>(path: string): Observable<R> {\n    const headers = this.getHeaders();\n    const completeUrl = `${this.apiUrl}/${path}`;\n\n    return this.http.delete<R>(completeUrl, headers);\n  }\n\n  download(path: string): Observable<Blob> {\n    const completeUrl = `${this.apiUrl}/${path}`;\n\n    return this.http.get(completeUrl, {\n      responseType: 'blob'\n    });\n  }\n\n  uploadDownload<B>(path: string, body: B): Observable<Blob> {\n    const completeUrl = `${this.apiUrl}/${path}`;\n\n    return this.http.post(completeUrl, body, {responseType: 'blob'});\n  }\n\n  generateQueryParams(paramsObj: QueryParamsModel): string {\n    let params = new HttpParams();\n\n    Object.entries(paramsObj)\n      .filter(([_, value]) => typeof value !== 'undefined' && value !== null)\n      .map(([key, value]) => (params = params.set(key, value!)));\n\n    return params.toString();\n  }\n\n  private getHeaders() {\n    return {\n      headers: new HttpHeaders({\n       'Content-Type': 'application/json',\n      })\n    };\n  }\n\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAI1E,SAASC,WAAW,QAAQ,+BAA+B;;;AAK3D,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACK,OAAO;EAEI;EAExCC,GAAGA,CAAIC,IAAY;IACjB,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,EAAE;IACjC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACN,MAAM,IAAIG,IAAI,EAAE;IAEpC,OAAO,IAAI,CAACJ,IAAI,CAACG,GAAG,CAAII,GAAG,EAAEF,OAAO,CAAC;EACvC;EAGAG,IAAIA,CAAOJ,IAAY,EAAEK,IAAO;IAC9B,MAAMJ,OAAO,GAAG,IAAI,CAACC,UAAU,EAAE;IACjC,MAAMI,WAAW,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIG,IAAI,EAAE;IAE5C,OAAO,IAAI,CAACJ,IAAI,CAACQ,IAAI,CAAIE,WAAW,EAAED,IAAI,EAAEJ,OAAO,CAAC;EACtD;EAEAM,GAAGA,CAAOP,IAAY,EAAEK,IAAO;IAC7B,MAAMJ,OAAO,GAAG,EAAE;IAClB,MAAMK,WAAW,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIG,IAAI,EAAE;IAE5C,OAAO,IAAI,CAACJ,IAAI,CAACW,GAAG,CAAID,WAAW,EAAED,IAAI,EAAEJ,OAAO,CAAC;EACrD;EAEAO,MAAMA,CAAIR,IAAY;IACpB,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,EAAE;IACjC,MAAMI,WAAW,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIG,IAAI,EAAE;IAE5C,OAAO,IAAI,CAACJ,IAAI,CAACY,MAAM,CAAIF,WAAW,EAAEL,OAAO,CAAC;EAClD;EAEAQ,QAAQA,CAACT,IAAY;IACnB,MAAMM,WAAW,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIG,IAAI,EAAE;IAE5C,OAAO,IAAI,CAACJ,IAAI,CAACG,GAAG,CAACO,WAAW,EAAE;MAChCI,YAAY,EAAE;KACf,CAAC;EACJ;EAEAC,cAAcA,CAAIX,IAAY,EAAEK,IAAO;IACrC,MAAMC,WAAW,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIG,IAAI,EAAE;IAE5C,OAAO,IAAI,CAACJ,IAAI,CAACQ,IAAI,CAACE,WAAW,EAAED,IAAI,EAAE;MAACK,YAAY,EAAE;IAAM,CAAC,CAAC;EAClE;EAEAE,mBAAmBA,CAACC,SAA2B;IAC7C,IAAIC,MAAM,GAAG,IAAItB,UAAU,EAAE;IAE7BuB,MAAM,CAACC,OAAO,CAACH,SAAS,CAAC,CACtBI,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,KAAK,CAAC,KAAK,OAAOA,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,IAAI,CAAC,CACtEC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEF,KAAK,CAAC,KAAML,MAAM,GAAGA,MAAM,CAACQ,GAAG,CAACD,GAAG,EAAEF,KAAM,CAAE,CAAC;IAE5D,OAAOL,MAAM,CAACS,QAAQ,EAAE;EAC1B;EAEQrB,UAAUA,CAAA;IAChB,OAAO;MACLD,OAAO,EAAE,IAAIV,WAAW,CAAC;QACxB,cAAc,EAAE;OAChB;KACF;EACH;EAAC,QAAA2B,CAAA,G;qBAhEUxB,UAAU,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVlC,UAAU;IAAAmC,OAAA,EAAVnC,UAAU,CAAAoC,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}