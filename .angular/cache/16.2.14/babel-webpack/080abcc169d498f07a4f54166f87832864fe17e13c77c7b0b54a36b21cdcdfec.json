{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { ApiService } from \"./api.service\";\nimport { TelegramService } from \"./telegram.service\";\nimport { BehaviorSubject, catchError, finalize, tap, throwError } from \"rxjs\";\nimport { environment } from \"src/environments/environments\";\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService extends ApiService {\n  constructor(http) {\n    super(http);\n    this.urlPath = '';\n    this.telegramService = inject(TelegramService);\n    this.router = inject(Router);\n    this.loadingSubject = new BehaviorSubject(false);\n    this.tokenSubject = new BehaviorSubject(this.getToken());\n    this.userDataSubject = new BehaviorSubject(null);\n    this.loading$ = this.loadingSubject.asObservable();\n    this.token$ = this.tokenSubject.asObservable();\n    this.user$ = this.userDataSubject.asObservable();\n  }\n  setToken(token) {\n    localStorage.setItem(\"token\", token);\n    this.tokenSubject.next(token);\n  }\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n  setUserData(userData) {\n    this.userDataSubject.next(userData);\n  }\n  isLoggin() {\n    return !!this.getToken;\n  }\n  auth() {\n    let params;\n    if (!environment.production) {\n      params = {\n        \"initData\": environment.initData\n      };\n    } else {\n      params = {\n        \"initData\": this.telegramService.initData()\n      };\n    }\n    this.loadingSubject.next(true);\n    return this.post(this.urlPath, params).pipe(tap(response => {\n      if (response) {\n        this.setToken(response.token);\n        this.setUserData(response.user);\n      }\n    }), finalize(() => {\n      this.loadingSubject.next(false);\n      this.router.navigate(['/home']);\n    }), catchError(error => {\n      return throwError(() => error);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","ApiService","TelegramService","BehaviorSubject","catchError","finalize","tap","throwError","environment","Router","AuthService","constructor","http","urlPath","telegramService","router","loadingSubject","tokenSubject","getToken","userDataSubject","loading$","asObservable","token$","user$","setToken","token","localStorage","setItem","next","getItem","setUserData","userData","isLoggin","auth","params","production","initData","post","pipe","response","user","navigate","error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/yluto4ka/Documents/AngularProjects/Frelance/front/src/app/core/services/auth.service.ts"],"sourcesContent":["import { inject, Injectable } from \"@angular/core\";\nimport { ApiService } from \"./api.service\";\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { TelegramService } from \"./telegram.service\";\nimport { BehaviorSubject, catchError, finalize, Observable, tap, throwError } from \"rxjs\";\nimport { environment } from \"src/environments/environments\";\nimport { User } from \"../models/user.mode\";\nimport { Router } from \"@angular/router\";\n\ninterface AuthData {\n    \"token\": string,\n    \"user\": User\n}\n@Injectable({\n    providedIn: 'root',\n})\n\nexport class AuthService extends ApiService {\n    private urlPath = '' as const;\n    telegramService = inject(TelegramService);\n    router = inject(Router);\n\n    private loadingSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    private tokenSubject: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(this.getToken());\n    private userDataSubject: BehaviorSubject<User | null> = new BehaviorSubject<User | null>(null);\n\n    loading$: Observable<boolean> = this.loadingSubject.asObservable();\n    token$: Observable<string | null> = this.tokenSubject.asObservable();\n    user$: Observable<User | null> = this.userDataSubject.asObservable();\n\n    constructor(http: HttpClient) {\n        super(http);\n    }\n\n    setToken(token: string): void {\n        localStorage.setItem(\"token\", token);\n        this.tokenSubject.next(token);\n    }\n    getToken(): string | null {\n        return localStorage.getItem(\"token\");\n    }\n    setUserData(userData: User | null): void {\n        this.userDataSubject.next(userData);\n    }\n\n    isLoggin(): boolean {\n        return !!this.getToken;\n    }\n\n    auth(): Observable<AuthData> {\n        let params;\n        if (!environment.production) {\n            params = {\n                \"initData\": environment.initData\n            }\n        } else {\n            params = {\n                \"initData\": this.telegramService.initData()\n            }\n        }\n        this.loadingSubject.next(true);\n        return this.post<AuthData, any>(this.urlPath, params).pipe(\n            tap(response => {\n                if (response) {\n                    this.setToken(response.token);\n                    this.setUserData(response.user);\n                }\n            }),\n            finalize(() => {\n                this.loadingSubject.next(false);\n                this.router.navigate(['/home']);\n            }),\n            catchError((error: HttpErrorResponse) => {\n                return throwError(() => error);\n            })\n        )\n    }\n}"],"mappings":"AAAA,SAASA,MAAM,QAAoB,eAAe;AAClD,SAASC,UAAU,QAAQ,eAAe;AAE1C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,eAAe,EAAEC,UAAU,EAAEC,QAAQ,EAAcC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AACzF,SAASC,WAAW,QAAQ,+BAA+B;AAE3D,SAASC,MAAM,QAAQ,iBAAiB;;;AAUxC,OAAM,MAAOC,WAAY,SAAQT,UAAU;EAavCU,YAAYC,IAAgB;IACxB,KAAK,CAACA,IAAI,CAAC;IAbP,KAAAC,OAAO,GAAG,EAAW;IAC7B,KAAAC,eAAe,GAAGd,MAAM,CAACE,eAAe,CAAC;IACzC,KAAAa,MAAM,GAAGf,MAAM,CAACS,MAAM,CAAC;IAEf,KAAAO,cAAc,GAA6B,IAAIb,eAAe,CAAU,KAAK,CAAC;IAC9E,KAAAc,YAAY,GAAmC,IAAId,eAAe,CAAgB,IAAI,CAACe,QAAQ,EAAE,CAAC;IAClG,KAAAC,eAAe,GAAiC,IAAIhB,eAAe,CAAc,IAAI,CAAC;IAE9F,KAAAiB,QAAQ,GAAwB,IAAI,CAACJ,cAAc,CAACK,YAAY,EAAE;IAClE,KAAAC,MAAM,GAA8B,IAAI,CAACL,YAAY,CAACI,YAAY,EAAE;IACpE,KAAAE,KAAK,GAA4B,IAAI,CAACJ,eAAe,CAACE,YAAY,EAAE;EAIpE;EAEAG,QAAQA,CAACC,KAAa;IAClBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpC,IAAI,CAACR,YAAY,CAACW,IAAI,CAACH,KAAK,CAAC;EACjC;EACAP,QAAQA,CAAA;IACJ,OAAOQ,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EACAC,WAAWA,CAACC,QAAqB;IAC7B,IAAI,CAACZ,eAAe,CAACS,IAAI,CAACG,QAAQ,CAAC;EACvC;EAEAC,QAAQA,CAAA;IACJ,OAAO,CAAC,CAAC,IAAI,CAACd,QAAQ;EAC1B;EAEAe,IAAIA,CAAA;IACA,IAAIC,MAAM;IACV,IAAI,CAAC1B,WAAW,CAAC2B,UAAU,EAAE;MACzBD,MAAM,GAAG;QACL,UAAU,EAAE1B,WAAW,CAAC4B;OAC3B;KACJ,MAAM;MACHF,MAAM,GAAG;QACL,UAAU,EAAE,IAAI,CAACpB,eAAe,CAACsB,QAAQ;OAC5C;;IAEL,IAAI,CAACpB,cAAc,CAACY,IAAI,CAAC,IAAI,CAAC;IAC9B,OAAO,IAAI,CAACS,IAAI,CAAgB,IAAI,CAACxB,OAAO,EAAEqB,MAAM,CAAC,CAACI,IAAI,CACtDhC,GAAG,CAACiC,QAAQ,IAAG;MACX,IAAIA,QAAQ,EAAE;QACV,IAAI,CAACf,QAAQ,CAACe,QAAQ,CAACd,KAAK,CAAC;QAC7B,IAAI,CAACK,WAAW,CAACS,QAAQ,CAACC,IAAI,CAAC;;IAEvC,CAAC,CAAC,EACFnC,QAAQ,CAAC,MAAK;MACV,IAAI,CAACW,cAAc,CAACY,IAAI,CAAC,KAAK,CAAC;MAC/B,IAAI,CAACb,MAAM,CAAC0B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC,EACFrC,UAAU,CAAEsC,KAAwB,IAAI;MACpC,OAAOnC,UAAU,CAAC,MAAMmC,KAAK,CAAC;IAClC,CAAC,CAAC,CACL;EACL;EAAC,QAAAC,CAAA,G;qBA3DQjC,WAAW,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtC,WAAW;IAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;IAAAC,UAAA,EAHR;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}